patch-package
--- a/node_modules/babel-plugin-jest-hoist/build/index.js
+++ b/node_modules/babel-plugin-jest-hoist/build/index.js
@@ -1,4 +1,4 @@
-'use strict';
+'use strict'
 
 /**
  * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
@@ -11,7 +11,7 @@
 
 function invariant(condition, message) {
   if (!condition) {
-    throw new Error('babel-plugin-jest-hoist: ' + message);
+    throw new Error('babel-plugin-jest-hoist: ' + message)
   }
 }
 
@@ -62,82 +62,109 @@ const WHITELISTED_IDENTIFIERS = {
   WeakMap: true,
   WeakSet: true,
   arguments: true,
+  console: true,
   expect: true,
   jest: true,
   require: true,
   undefined: true
-};
-Object.keys(global).forEach(name => WHITELISTED_IDENTIFIERS[name] = true);
+}
+Object.keys(global).forEach((name) => (WHITELISTED_IDENTIFIERS[name] = true))
 
-const JEST_GLOBAL = { name: 'jest' };
+const JEST_GLOBAL = {name: 'jest'}
 const IDVisitor = {
   ReferencedIdentifier(path) {
-    this.ids.add(path);
+    this.ids.add(path)
   },
   blacklist: ['TypeAnnotation']
-};
+}
 
-const FUNCTIONS = Object.create(null);
-FUNCTIONS.mock = args => {
+const FUNCTIONS = Object.create(null)
+FUNCTIONS.mock = (args) => {
   if (args.length === 1) {
-    return args[0].isStringLiteral() || args[0].isLiteral();
+    return args[0].isStringLiteral() || args[0].isLiteral()
   } else if (args.length === 2 || args.length === 3) {
-    const moduleFactory = args[1];
-    invariant(moduleFactory.isFunction(), 'The second argument of `jest.mock` must be an inline function.');
+    const moduleFactory = args[1]
+    invariant(
+      moduleFactory.isFunction(),
+      'The second argument of `jest.mock` must be an inline function.'
+    )
 
-    const ids = new Set();
-    const parentScope = moduleFactory.parentPath.scope;
-    moduleFactory.traverse(IDVisitor, { ids });
+    const ids = new Set()
+    const parentScope = moduleFactory.parentPath.scope
+    moduleFactory.traverse(IDVisitor, {ids})
     for (const id of ids) {
-      const name = id.node.name;
-      let found = false;
-      let scope = id.scope;
+      const name = id.node.name
+      let found = false
+      let scope = id.scope
 
       while (scope !== parentScope) {
         if (scope.bindings[name]) {
-          found = true;
-          break;
+          found = true
+          break
         }
 
-        scope = scope.parent;
+        scope = scope.parent
       }
 
       if (!found) {
-        invariant(scope.hasGlobal(name) && WHITELISTED_IDENTIFIERS[name] || /^mock/.test(name) ||
-        // Allow istanbul's coverage variable to pass.
-        /^(?:__)?cov/.test(name), 'The module factory of `jest.mock()` is not allowed to ' + 'reference any out-of-scope variables.\n' + 'Invalid variable access: ' + name + '\n' + 'Whitelisted objects: ' + Object.keys(WHITELISTED_IDENTIFIERS).join(', ') + '.\n' + 'Note: This is a precaution to guard against uninitialized mock ' + 'variables. If it is ensured that the mock is required lazily, ' + 'variable names prefixed with `mock` are permitted.');
+        invariant(
+          (scope.hasGlobal(name) && WHITELISTED_IDENTIFIERS[name]) ||
+            /^mock/.test(name) ||
+            // Allow istanbul's coverage variable to pass.
+            /^(?:__)?cov/.test(name),
+          'The module factory of `jest.mock()` is not allowed to ' +
+            'reference any out-of-scope variables.\n' +
+            'Invalid variable access: ' +
+            name +
+            '\n' +
+            'Whitelisted objects: ' +
+            Object.keys(WHITELISTED_IDENTIFIERS).join(', ') +
+            '.\n' +
+            'Note: This is a precaution to guard against uninitialized mock ' +
+            'variables. If it is ensured that the mock is required lazily, ' +
+            'variable names prefixed with `mock` are permitted.'
+        )
       }
     }
 
-    return true;
+    return true
   }
-  return false;
-};
+  return false
+}
 
-FUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();
-FUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();
+FUNCTIONS.unmock = (args) => args.length === 1 && args[0].isStringLiteral()
+FUNCTIONS.deepUnmock = (args) => args.length === 1 && args[0].isStringLiteral()
 
-FUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args => args.length === 0;
+FUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = (args) =>
+  args.length === 0
 
 module.exports = () => {
-  const isJest = callee => callee.get('object').isIdentifier(JEST_GLOBAL) || callee.isMemberExpression() && isJest(callee.get('object'));
-  const shouldHoistExpression = expr => {
+  const isJest = (callee) =>
+    callee.get('object').isIdentifier(JEST_GLOBAL) ||
+    (callee.isMemberExpression() && isJest(callee.get('object')))
+  const shouldHoistExpression = (expr) => {
     if (!expr.isCallExpression()) {
-      return false;
+      return false
     }
 
-    const callee = expr.get('callee');
-    const object = callee.get('object');
-    const property = callee.get('property');
-    return property.isIdentifier() && FUNCTIONS[property.node.name] && (object.isIdentifier(JEST_GLOBAL) || callee.isMemberExpression() && shouldHoistExpression(object)) && FUNCTIONS[property.node.name](expr.get('arguments'));
-  };
+    const callee = expr.get('callee')
+    const object = callee.get('object')
+    const property = callee.get('property')
+    return (
+      property.isIdentifier() &&
+      FUNCTIONS[property.node.name] &&
+      (object.isIdentifier(JEST_GLOBAL) ||
+        (callee.isMemberExpression() && shouldHoistExpression(object))) &&
+      FUNCTIONS[property.node.name](expr.get('arguments'))
+    )
+  }
   return {
     visitor: {
       ExpressionStatement(path) {
         if (shouldHoistExpression(path.get('expression'))) {
-          path.node._blockHoist = Infinity;
+          path.node._blockHoist = Infinity
         }
       }
     }
-  };
-};
\ No newline at end of file
+  }
+}
