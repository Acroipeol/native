require 'dotenv/load'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ANDROID_DIR = File.expand_path('../android', __dir__)
IOS_DIR = File.expand_path('../ios', __dir__)

def package
  $package_json ||= JSON.parse(
    File.read('../package.json'),
    symbolize_names: true
  )
end

def version_name(args)
    tag = args[:tag] || ''
    version = args[:version] || package[:version]
    version << '-' << tag unless tag.empty?
    version
end

def android_certificate()
  {
    'android.injected.signing.store.file' => ENV['ANDROID_KEYSTORE_FILE'],
    'android.injected.signing.store.password' => ENV['ANDROID_KEYSTORE_PASSWORD'],
    'android.injected.signing.key.alias' => ENV['ANDROID_KEY_ALIAS'],
    'android.injected.signing.key.password' => ENV['ANDROID_KEY_PASSWORD']
  }
end

platform :android do
  BUILD_NUMBER_PATTERN = '(versionCode) ([[:digit:]]*)'
  VERSION_NAME_PATTERN = '(versionName) "(.*)"'

  desc "Bump build and version numbers"
  lane :bump do |args|
    gradle_build = "#{ANDROID_DIR}/app/build.gradle"
    version = version_name args
    build_number = args[:build_number]
    unless build_number
      build_number = sh "awk 'match($0,/#{BUILD_NUMBER_PATTERN}/) {print $2}' #{gradle_build}"
      build_number = build_number.to_i + 1
    end
    # Set extended regex option according to OS
    # http://www.grymoire.com/Unix/Sed.html#uh-4a
    opt = case RUBY_PLATFORM
      when /darwin/i then "Ei ''"
      when /linux|arch/i then 'ri'
    end
    sh %Q{sed -#{opt} 's/#{BUILD_NUMBER_PATTERN}/\\1 #{build_number}/' #{gradle_build}}
    sh %Q{sed -#{opt} 's/#{VERSION_NAME_PATTERN}/\\1 "#{version}"/' #{gradle_build}}
  end

  desc "Build akp file"
  lane :build do |signed: false, bump: false, **options|
    bump options if bump
    build_options = signed ? {print_command: false, properties: android_certificate} : {}
    gradle(
      task: "clean assembleRelease",
      project_dir: ANDROID_DIR,
      **build_options
    )
  end

  desc "Publish beta build"
  lane :beta do |comment: nil, groups: nil, promote: false, bin: nil, **options|
    build options unless bin
    bin ||= lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_BUILD_SECRET'],
      apk_path: bin,
      notes: comment,
      groups: groups,
      notifications: promote
    )
  end
end

platform :ios do
  PROJECT_DIR="#{IOS_DIR}/EmCasa.xcodeproj"
  WORKSPACE_DIR="#{IOS_DIR}/EmCasa.xcworkspace"
  TEAM_ID = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
  APP_ID = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  desc "Bump build and version numbers"
  lane :bump do |args|
    version = version_name(args)
    build_number = args[:build_number]
    increment_build_number(build_number: build_number, xcodeproj: PROJECT_DIR)
    increment_version_number(version_number: version, xcodeproj: PROJECT_DIR)
  end

  desc "Build ipa file"
  lane :build do |bump: false, signed: false, method: 'ad-hoc', **options|
    gym_options = {
        scheme: 'EmCasa',
        output_directory: "#{IOS_DIR}/build",
        xcconfig: ENV['XCCONFIG_FILE'] || nil,
        workspace: WORKSPACE_DIR,
        export_method: method,
        xcargs: 'CODE_SIGNING_REQUIRED=NO'
    }
    bump options if bump
    if signed
      gym_options[:export_options] = {
        provisioningProfiles: {
          APP_ID => ENV['IOS_PROVISIONING_PROFILE_NAME']
        }
      }
      automatic_code_signing(
        path: PROJECT_DIR,
        code_sign_identity: ENV['IOS_CODE_SIGNING_IDENTITY'],
        bundle_identifier: APP_ID,
        team_id: TEAM_ID,
        targets: ['EmCasa']
      )
    end
    gym(gym_options)
  end

  desc "Publish beta build"
  lane :beta do |comment: nil, groups: nil, promote: false, bin: nil, **options|
    build options unless bin
    bin ||= lane_context[SharedValues::IPA_OUTPUT_PATH]
    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_BUILD_SECRET'],
      ipa_path: bin,
      notes: comment,
      groups: groups,
      notifications: promote
    )
  end
end

